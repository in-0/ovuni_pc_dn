_base_ = [
    '../../../configs/_base_/default_runtime.py'
]

plugin=True
plugin_dir='projects/mmdet3d_plugin/'

# If point cloud range is changed, the models should also change their point
# cloud range accordingly
voxel_size = [0.02, 0.02, 0.02]
grid_size = [128, 640, 640]
point_cloud_range = [-6.4, -6.4, -0.1, 6.4, 6.4, 2.46]
fp16_enabled = True
bev_stride = 4
sample_num = 5


input_modality = dict(
    use_lidar=True,
    use_camera=False,
    use_radar=False,
    use_map=False,
    use_external=False)

model = dict(
    type='OV_Uni3DETR',
    # sample_save_dir='scannet_test_samples',
    pts_voxel_layer=dict(
       max_num_points=5, voxel_size=voxel_size, max_voxels=(16000, 40000),
       point_cloud_range=point_cloud_range),
    # pts_voxel_encoder=dict(type='DynamicSimpleVFE', voxel_size=voxel_size, point_cloud_range=point_cloud_range),
    pts_voxel_encoder=dict(type='HardSimpleVFE', num_features=4),
    pts_middle_encoder=dict(
        type='SparseEncoderHD',
        in_channels=4,
        sparse_shape=grid_size,
        base_channels=32,
        output_channels=512,
        order=('conv', 'norm', 'act'),
        encoder_channels=((32, 32, 64), (64, 64, 128), (128, 128, 256), (256, 256)),
        encoder_paddings=((0, 0, 1), (0, 0, 1), (0, 0, [0, 1, 1]), (0, 0)),
        block_type='basicblock',
        fp16_enabled=False), # not enable FP16 here
    pts_backbone=dict(
        type='SECOND3D',
        in_channels=[512, 512, 512],
        out_channels=[128, 256, 512],
        layer_nums=[5, 5, 5],
        layer_strides=[1, 2, 4],
        is_cascade=False,
        norm_cfg=dict(type='BN3d', eps=1e-3, momentum=0.01),
        conv_cfg=dict(type='Conv3d', kernel=(1,3,3), bias=False)),
    pts_neck=dict(
        type='SECOND3DFPN',
        in_channels=[128, 256, 512],
        out_channels=[256, 256, 256],
        upsample_strides=[1, 2, 4],
        norm_cfg=dict(type='BN3d', eps=1e-3, momentum=0.01),
        upsample_cfg=dict(type='deconv3d', bias=False),
        extra_conv=dict(type='Conv3d', num_conv=3, bias=False),
        use_conv_for_no_stride=True),
    pts_bbox_head=dict(
        type='Uni3DETRHeadCLIPDN',
        num_query=300,
        train_zeroshot_path='clip_embed/scannet_clip_a+cname_rn50_manyprompt_365c_coda.npy',
        val_zeroshot_path='clip_embed/scannet_clip_a+cname_rn50_manyprompt_20c_coda.npy',
        num_classes=365,
        in_channels=256,
        sync_cls_avg_factor=True,
        with_box_refine=True,
        as_two_stage=False,
        code_size=8,
        noise_type='ray',
        ray_noise_range=[0.8, 1.2],
        dn_weight=0.1,
        transformer=dict(
            type='Uni3DETRTransformer',
            fp16_enabled=fp16_enabled,
            decoder=dict(
                type='Uni3DETRTransformerDecoder',
                num_layers=3,
                return_intermediate=True,
                transformerlayers=dict(
                    type='BaseTransformerLayer',
                    attn_cfgs=[
                        dict(
                            type='MultiheadAttention',
                            embed_dims=256,
                            num_heads=8,
                            dropout=0.1), 
                        dict(
                            type='UniCrossAtten',
                            num_points=1,
                            embed_dims=256,
                            num_sweeps=1,
                            fp16_enabled=fp16_enabled),
                    ],
                    ffn_cfgs=dict(
                        type='FFN',
                        embed_dims=256,
                        feedforward_channels=512,
                        num_fcs=2,
                        ffn_drop=0.1,
                        act_cfg=dict(type='ReLU', inplace=True),
                    ),
                    norm_cfg=dict(type='LN'),
                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm', 'ffn', 'norm'))
            )
        ),
        bbox_coder=dict(
            type='NMSFreeCoder',
            post_center_range=point_cloud_range,
            pc_range=point_cloud_range,
            max_num=5000,
            voxel_size=voxel_size, 
            alpha=1.0,
            num_classes=365), 
        post_processing=dict(
            type='nms',
            nms_thr=0.5),
        ######## soft nms can generate a little higher result
        # post_processing=dict(
        #     type='soft_nms',
        #     gaussian_sigma=0.3, 
        #     prune_threshold=1e-2),
        positional_encoding=dict(
            type='SinePositionalEncoding',
            num_feats=128,
            normalize=True,
            offset=-0.5),
        loss_cls=dict(type='SoftFocalLoss', use_sigmoid=True, gamma=2.0, alpha=0.25, loss_weight=2.0),
        loss_bbox=dict(type='L1Loss', loss_weight=0.25),
        loss_iou=dict(type='IoU3DLoss', loss_weight=1.2),
        code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    ),
    # model training and testing settings
    train_cfg=dict(pts=dict(
        grid_size=grid_size,
        voxel_size=voxel_size,
        point_cloud_range=point_cloud_range,
        out_size_factor=bev_stride,
        assigner=dict(
            type='HungarianAssigner3D',
            cls_cost=dict(type='FocalLossCost', weight=2.0),
            reg_cost=dict(type='BBox3DL1Cost', weight=0.25),
            iou_cost=dict(type='IoU3DCost', weight=1.2),
            pc_range=point_cloud_range))))


dataset_type = 'ScanNetDataset_OV_processed'
data_root = 'data/ov-det/ScanNet_processed/'
class_names = {"human": 0,
           "sneakers": 1,
           "chair": 2,
           "hat": 3,
           "lamp": 4,
           "bottle": 5,
           "cabinet/shelf": 6,
           "cup": 7,
           "car": 8,
           "glasses": 9,
           "picture/frame": 10,
           "desk": 11,
           "handbag": 12,
           "street lights": 13,
           "book": 14,
           "plate": 15,
           "helmet": 16,
           "leather shoes": 17,
           "pillow": 18,
           "glove": 19,
           "potted plant": 20,
           "bracelet": 21,
           "flower": 22,
           "monitor": 23,
           "storage box": 24,
           "plants pot/vase": 25,
           "bench": 26,
           "wine glass": 27,
           "boots": 28,
           "dining table": 29,
           "umbrella": 30,
           "boat": 31,
           "flag": 32,
           "speaker": 33,
           "trash bin/can": 34,
           "stool": 35,
           "backpack": 36,
           "sofa": 37,
           "belt": 38,
           "carpet": 39,
           "basket": 40,
           "towel/napkin": 41,
           "slippers": 42,
           "bowl": 43,
           "barrel/bucket": 44,
           "coffee table": 45,
           "suv": 46,
           "toy": 47,
           "tie": 48,
           "bed": 49,
           "traffic light": 50,
           "pen/pencil": 51,
           "microphone": 52,
           "sandals": 53,
           "canned": 54,
           "necklace": 55,
           "mirror": 56,
           "faucet": 57,
           "bicycle": 58,
           "bread": 59,
           "high heels": 60,
           "ring": 61,
           "van": 62,
           "watch": 63,
           "combine with bowl": 64,
           "sink": 65,
           "horse": 66,
           "fish": 67,
           "apple": 68,
           "traffic sign": 69,
           "camera": 70,
           "candle": 71,
           "stuffed animal": 72,
           "cake": 73,
           "motorbike/motorcycle": 74,
           "wild bird": 75,
           "laptop": 76,
           "knife": 77,
           "cellphone": 78,
           "paddle": 79,
           "truck": 80,
           "cow": 81,
           "power outlet": 82,
           "clock": 83,
           "drum": 84,
           "fork": 85,
           "bus": 86,
           "hanger": 87,
           "nightstand": 88,
           "pot/pan": 89,
           "sheep": 90,
           "guitar": 91,
           "traffic cone": 92,
           "tea pot": 93,
           "keyboard": 94,
           "tripod": 95,
           "hockey stick": 96,
           "fan": 97,
           "dog": 98,
           "spoon": 99,
           "blackboard/whiteboard": 100,
           "balloon": 101,
           "air conditioner": 102,
           "cymbal": 103,
           "mouse": 104,
           "telephone": 105,
           "pickup truck": 106,
           "orange": 107,
           "banana": 108,
           "airplane": 109,
           "luggage": 110,
           "skis": 111,
           "soccer": 112,
           "trolley": 113,
           "oven": 114,
           "remote": 115,
           "combine with glove": 116,
           "paper towel": 117,
           "refrigerator": 118,
           "train": 119,
           "tomato": 120,
           "machinery vehicle": 121,
           "tent": 122,
           "shampoo/shower gel": 123,
           "head phone": 124,
           "lantern": 125,
           "donut": 126,
           "cleaning products": 127,
           "sailboat": 128,
           "tangerine": 129,
           "pizza": 130,
           "kite": 131,
           "computer box": 132,
           "elephant": 133,
           "toiletries": 134,
           "gas stove": 135,
           "broccoli": 136,
           "toilet": 137,
           "stroller": 138,
           "shovel": 139,
           "baseball bat": 140,
           "microwave": 141,
           "skateboard": 142,
           "surfboard": 143,
           "surveillance camera": 144,
           "gun": 145,
           "Life saver": 146,
           "cat": 147,
           "lemon": 148,
           "liquid soap": 149,
           "zebra": 150,
           "duck": 151,
           "sports car": 152,
           "giraffe": 153,
           "pumpkin": 154,
           "Accordion/keyboard/piano": 155,
           "radiator": 156,
           "converter": 157,
           "tissue": 158,
           "carrot": 159,
           "washing machine": 160,
           "vent": 161,
           "cookies": 162,
           "cutting/chopping board": 163,
           "tennis racket": 164,
           "candy": 165,
           "skating and skiing shoes": 166,
           "scissors": 167,
           "folder": 168,
           "baseball": 169,
           "strawberry": 170,
           "bow tie": 171,
           "pigeon": 172,
           "pepper": 173,
           "coffee machine": 174,
           "bathtub": 175,
           "snowboard": 176,
           "suitcase": 177,
           "grapes": 178,
           "ladder": 179,
           "pear": 180,
           "american football": 181,
           "basketball": 182,
           "potato": 183,
           "paint brush": 184,
           "printer": 185,
           "billiards": 186,
           "fire hydrant": 187,
           "goose": 188,
           "projector": 189,
           "sausage": 190,
           "fire extinguisher": 191,
           "extension cord": 192,
           "facial mask": 193,
           "tennis ball": 194,
           "chopsticks": 195,
           "Electronic stove and gas st": 196,
           "pie": 197,
           "frisbee": 198,
           "kettle": 199,
           "hamburger": 200,
           "golf club": 201,
           "cucumber": 202,
           "clutch": 203,
           "blender": 204,
           "tong": 205,
           "slide": 206,
           "hot dog": 207,
           "toothbrush": 208,
           "facial cleanser": 209,
           "mango": 210,
           "deer": 211,
           "egg": 212,
           "violin": 213,
           "marker": 214,
           "ship": 215,
           "chicken": 216,
           "onion": 217,
           "ice cream": 218,
           "tape": 219,
           "wheelchair": 220,
           "plum": 221,
           "bar soap": 222,
           "scale": 223,
           "watermelon": 224,
           "cabbage": 225,
           "router/modem": 226,
           "golf ball": 227,
           "pine apple": 228,
           "crane": 229,
           "fire truck": 230,
           "peach": 231,
           "cello": 232,
           "notepaper": 233,
           "tricycle": 234,
           "toaster": 235,
           "helicopter": 236,
           "green beans": 237,
           "brush": 238,
           "carriage": 239,
           "cigar": 240,
           "earphone": 241,
           "penguin": 242,
           "hurdle": 243,
           "swing": 244,
           "radio": 245,
           "CD": 246,
           "parking meter": 247,
           "swan": 248,
           "garlic": 249,
           "french fries": 250,
           "horn": 251,
           "avocado": 252,
           "saxophone": 253,
           "trumpet": 254,
           "sandwich": 255,
           "cue": 256,
           "kiwi fruit": 257,
           "bear": 258,
           "fishing rod": 259,
           "cherry": 260,
           "tablet": 261,
           "green vegetables": 262,
           "nuts": 263,
           "corn": 264,
           "key": 265,
           "screwdriver": 266,
           "globe": 267,
           "broom": 268,
           "pliers": 269,
           "hammer": 270,
           "volleyball": 271,
           "eggplant": 272,
           "trophy": 273,
           "board eraser": 274,
           "dates": 275,
           "rice": 276,
           "tape measure/ruler": 277,
           "dumbbell": 278,
           "hamimelon": 279,
           "stapler": 280,
           "camel": 281,
           "lettuce": 282,
           "goldfish": 283,
           "meat balls": 284,
           "medal": 285,
           "toothpaste": 286,
           "antelope": 287,
           "shrimp": 288,
           "rickshaw": 289,
           "trombone": 290,
           "pomegranate": 291,
           "coconut": 292,
           "jellyfish": 293,
           "mushroom": 294,
           "calculator": 295,
           "treadmill": 296,
           "butterfly": 297,
           "egg tart": 298,
           "cheese": 299,
           "pomelo": 300,
           "pig": 301,
           "race car": 302,
           "rice cooker": 303,
           "tuba": 304,
           "crosswalk sign": 305,
           "papaya": 306,
           "hair dryer": 307,
           "green onion": 308,
           "chips": 309,
           "dolphin": 310,
           "sushi": 311,
           "urinal": 312,
           "donkey": 313,
           "electric drill": 314,
           "spring rolls": 315,
           "tortoise/turtle": 316,
           "parrot": 317,
           "flute": 318,
           "measuring cup": 319,
           "shark": 320,
           "steak": 321,
           "poker card": 322,
           "binoculars": 323,
           "llama": 324,
           "radish": 325,
           "noodles": 326,
           "mop": 327,
           "yak": 328,
           "crab": 329,
           "microscope": 330,
           "barbell": 331,
           "Bread/bun": 332,
           "baozi": 333,
           "lion": 334,
           "red cabbage": 335,
           "polar bear": 336,
           "lighter": 337,
           "mangosteen": 338,
           "seal": 339,
           "comb": 340,
           "eraser": 341,
           "pitaya": 342,
           "scallop": 343,
           "pencil case": 344,
           "saw": 345,
           "table tennis  paddle": 346,
           "okra": 347,
           "starfish": 348,
           "monkey": 349,
           "eagle": 350,
           "durian": 351,
           "rabbit": 352,
           "game board": 353,
           "french horn": 354,
           "ambulance": 355,
           "asparagus": 356,
           "hoverboard": 357,
           "pasta": 358,
           "target": 359,
           "hotair balloon": 360,
           "chainsaw": 361,
           "lobster": 362,
           "iron": 363,
           "flashlight": 364,}
novel_classes = {"toilet": 0,
              "bed": 1,
              "chair": 2,
              "sofa": 3,
              "dresser": 4,
              "table": 5,
              "cabinet": 6,
              "bookshelf": 7,
              "pillow": 8,
              "sink": 9,
              "bathtub": 10,
              "refridgerator": 11,
              "desk": 12,
              "night stand": 13,
              "counter": 14,
              "door": 15,
              "curtain": 16,
              "box": 17,
              "lamp": 18,
              "bag": 19,}

file_client_args = dict(backend='disk')

train_pipeline = [
    dict(
        type='LoadPointsFromFile',
        file_client_args=file_client_args,
        coord_type='DEPTH',
        shift_height=True,
        load_dim=6,
        use_dim=[0, 1, 2]),
    dict(
        type='LoadAnnotations3D',
        file_client_args=file_client_args,
        with_bbox_3d=True,
        with_label_3d=True),
    # dict(type='GlobalAlignment', rotation_axis=2),
    # dict(type='PointSample', num_points=50000),
    dict(
        type='UnifiedRandomFlip3D',
        sync_2d=False,
        flip_ratio_bev_horizontal=0.5,
    ),
    dict(
        type='UnifiedRotScaleTrans',
        rot_range=[-0.087266, 0.087266],
        scale_ratio_range=[1.0, 1.0],
        shift_height=True),
    dict(type='DefaultFormatBundle3D', class_names=class_names),
    dict(
        type='Collect3D',
        keys=[
            'points', 'gt_bboxes_3d', 'gt_labels_3d',
        ],
        meta_keys=('gt_bboxes_3d', 'gt_labels_3d'),
        )
]
# construct a pipeline for data and gt loading in show function
# please keep its loading function consistent with test_pipeline (e.g. client)
test_pipeline = [
    dict(
        type='LoadPointsFromFile',
        file_client_args=file_client_args,
        coord_type='DEPTH',
        shift_height=False,
        load_dim=6,
        use_dim=[0, 1, 2]),
    dict(
        type='DefaultFormatBundle3D',
        class_names=class_names,
        with_label=False),
    dict(type='Collect3D', keys=['points'])
]

data = dict(
    samples_per_gpu=1,
    workers_per_gpu=0,
    train=dict(
        type='RepeatDataset',
        times=5,
        dataset=dict(
            type=dataset_type,
            data_root=data_root,
            ann_file=data_root + 'scannet_processed_infos_train.pkl',
            pipeline=train_pipeline,
            filter_empty_gt=False,
            classes=class_names,
            novel_classes=novel_classes,
            # we use box_type_3d='LiDAR' in kitti and nuscenes dataset
            # and box_type_3d='Depth' in sunrgbd and scannet dataset.
            box_type_3d='Depth',
            file_client_args=file_client_args)),
    val=dict(
        type=dataset_type,
        data_root=data_root,
        ann_file=data_root + 'scannet_processed_infos_val.pkl',
        pipeline=test_pipeline,
        classes=class_names,
        novel_classes=novel_classes,
        test_mode=True,
        box_type_3d='Depth',
        file_client_args=file_client_args),
    test=dict(
        type=dataset_type,
        data_root=data_root,
        ann_file=data_root + 'scannet_processed_infos_val.pkl',
        pipeline=test_pipeline,
        classes=class_names,
        novel_classes=novel_classes, 
        box_type_3d='Depth',
        file_client_args=file_client_args))

evaluation = dict(pipeline=test_pipeline)


# optimizer
# This schedule is mainly used by models on indoor dataset,
# e.g., VoteNet on SUNRGBD and ScanNet
lr = 2e-5 *2/8 * 20 * 4/6  *6/8  *1.5 *8/6###########40 # max learning rate
optimizer = dict(type='AdamW', lr=lr, weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=10, norm_type=2))


lr_config = dict(policy='step', warmup=None, step=[32, 38])
runner = dict(type='EpochBasedRunner', max_epochs=40)

# fp16 setting
fp16 = dict(loss_scale=32.)
find_unused_parameters = True
